<?php

namespace Test\AbraFlexi\Imap2AF;

use AbraFlexi\Imap2AF\Convertor;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2020-12-02 at 18:09:08.
 */
class ConvertorTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var Convertor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new Convertor(constant('ISDOC_FILE'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domPaymentMeansToArray
     */
    public function testdomPaymentMeansToArray() {
        $this->assertEquals(['datSplat' => '2020-10-13'], $this->object->domPaymentMeansToArray($this->object->getXmlDomDocument()->getElementsByTagName('PaymentMeans')));
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domSuplierToArray
     */
    public function testdomSuplierToArray() {
        $this->assertEquals([
            'nazev' => 'SPOJE.NET s.r.o.',
            'ulice' => 'Závěrka 473/8',
            'mesto' => 'Praha 6',
            'psc' => '16900',
            'tel' => '+420 233 358 050',
            'email' => 'office@spoje.net',
            'stat' => 'code:CZ',
            'ic' => '29034736',
            'dic' => 'CZ29034736',
            'platceDph' => true,
            'typVztahuK' => 'typVztahu.dodavatel',
                ], $this->object->domSuplierToArray($this->object->getXmlDomDocument()->getElementsByTagName('AccountingSupplierParty')));
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domCustomerToArray
     */
    public function testdomCustomerToArray() {
        $this->assertEquals([
            'nazev' => 'Vítězslav Dvořák',
            'ulice' => 'Tehovská 642/3',
            'mesto' => 'Praha 10',
            'psc' => '10000',
            'tel' => '',
            'email' => 'info@vitexsoftware.cz',
            'stat' => 'code:CZ',
            'ic' => '69438676',
            'dic' => '',
            'platceDph' => true,
                ], $this->object->domCustomerToArray($this->object->getXmlDomDocument()->getElementsByTagName('AccountingCustomerParty')));
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::getInvoiceSuplier
     */
    public function testgetInvoiceSuplier() {
        $this->assertEquals([
            'nazev' => 'SPOJE.NET s.r.o.',
            'ulice' => 'Závěrka 473/8',
            'mesto' => 'Praha 6',
            'psc' => '16900',
            'tel' => '+420 233 358 050',
            'email' => 'office@spoje.net',
            'stat' => 'code:CZ',
            'ic' => '29034736',
            'dic' => 'CZ29034736',
            'platceDph' => true,
            'typVztahuK' => 'typVztahu.dodavatel',
                ], $this->object->getInvoiceSuplier());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domTaxTotalToArray
     */
    public function testdomTaxTotalToArray() {
//        $this->assertEquals([], $this->object->domTaxTotalToArray());
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domInvoiceToArray
     */
    public function testdomInvoiceToArray() {
        $this->assertEquals([
            'id' => 'ext:fc:VF1-6877/2020',
            'cisDosle' => 'VF1-6877/2020',
            'uuid' => 'C2220638-2F14-9103-D6E2-6AF19C1C3537',
            'datVyst' => '2020-09-29',
            'poznam' => 'Kredit - Domény',
            'popis' => 'Kredit - Domény',
            'mena' => 'code:CZK',
            'typDokl' => 'code:FAKTURA',
                ], $this->object->domInvoiceToArray($this->object->getXmlDomDocument()->getElementsByTagName('Invoice')));
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::invoiceSuplier
     */
    public function testinvoiceSuplier() {
        $this->assertEquals([
            'nazev' => 'SPOJE.NET s.r.o.',
            'ulice' => 'Závěrka 473/8',
            'mesto' => 'Praha 6',
            'psc' => '16900',
            'tel' => '+420 233 358 050',
            'email' => 'office@spoje.net',
            'stat' => 'code:CZ',
            'ic' => '29034736',
            'dic' => 'CZ29034736',
            'platceDph' => true,
            'typVztahuK' => 'typVztahu.dodavatel',
                ], $this->object->invoiceSuplier());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::invoiceCustomer
     */
    public function testinvoiceCustomer() {
        $this->assertEquals([
            'nazev' => 'Vítězslav Dvořák',
            'ulice' => 'Tehovská 642/3',
            'mesto' => 'Praha 10',
            'psc' => '10000',
            'tel' => '',
            'email' => 'info@vitexsoftware.cz',
            'stat' => 'code:CZ',
            'ic' => '69438676',
            'dic' => '',
            'platceDph' => true
                ], $this->object->invoiceCustomer());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::paymentMeans
     */
    public function testpaymentMeans() {
        $this->assertEquals(['datSplat' => '2020-10-13'], $this->object->paymentMeans());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::invoiceItems
     */
    public function testinvoiceItems() {
        $this->assertEquals([[
        'typPolozkyK' => 'typPolozky.katalog',
        'ucetni' => true,
        'typCenyDphK' => 'typCeny.sDph',
        'typSzbDphK' => 'typSzbDph.dphZakl',
        'kratkyPopis' => 'KREDIT_DOMENA',
        'nazev' => 'Kredit - Domény',
        'cenaMj' => '605.0',
        'sumCelkem' => '605.0',
        'sumZkl' => 500.0,
        'nakupCena' => 500.0,
        'cenaZaklVcDph' => 605.0,
        'dan' => 105.0,
        'mnozMj' => '1.0',
        'stavMJ' => '1.0',
        'jednotka' => 'KS',
        'sumDph' => '105.0',
            ]], $this->object->invoiceItems());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::invoiceInfo
     */
    public function testinvoiceInfo() {
        $this->assertEquals([
            'id' => 'ext:fc:VF1-6877/2020',
            'cisDosle' => 'VF1-6877/2020',
            'uuid' => 'C2220638-2F14-9103-D6E2-6AF19C1C3537',
            'datVyst' => '2020-09-29',
            'poznam' => 'Kredit - Domény',
            'popis' => 'Kredit - Domény',
            'mena' => 'code:CZK',
            'typDokl' => 'code:FAKTURA',
                ], $this->object->invoiceInfo());
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domLMTotalToArray
     */
    public function testdomLMTotalToArray() {
//        $this->assertEquals([], $this->object->domLMTotalToArray());
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\Imap2AF\Convertor::domInvoiceItemToArray
     */
    public function testdomInvoiceItemToArray() {
//        $this->assertEquals([], $this->object->domInvoiceItemToArray($this->object->getXmlDomDocument()->getElementsByTagName('InvoiceLine')));
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

}
